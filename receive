#!/usr/bin/bash
set -euo pipefail

if [[ $# -lt 1 ]]; then
  echo "Usage: $0 COLLECTION_ID [INPUT_FILE]"
  echo
fi

function error() { echo $@ >&2; exit 1; }

collection=$1
[[ "$collection" =~ ^[0-9]*$ ]] || error "Collection ID must be numeric!"
uri=https://graph.nfdi4objects.net/collection/$1

if [[ $# -eq 1 ]]; then
  jq ".[]|select(.id==\"$uri\")" collections.json
  exit
fi

input=$2
name=Testammlung

if [[ $collection -ne "0" ]]; then
  name=$(jq ".[]|select(.id==\"$uri\").name" collections.json)
  [[ -z "$name" ]] && error "Collection ID $collection unbekannt!"
fi

dir=stage/$collection
mkdir -p "$dir"

receive() {
    extension="${input##*.}"
    if [ "$extension" == "xml" ]; then
        receive_lido
    elif [ "$extension" == "ttl" ]; then
        receive_rdf
    elif [ "$extension" == "nt" ]; then
        receive_rdf
    else
        echo "Unbekannte Dateiendung!"
        exit 1
    fi
}

receive_lido() {
    echo "## $collection: $name"
    echo
    echo "Empfangene XML-Daten im LIDO-Format aus \`$input\` "
    echo
    echo -n "Anzahl von LIDO-Datensätzen: "
    xmlstarlet sel -t -v 'count(/lido:lidoWrap/lido:lido)' "$input"

    echo
    echo 
    echo "### Validierung"
    echo

    # XML-Validierung 
    ./lido-schema/lido-valid "$input" --quiet --noout --nowarning || return
    echo "Daten sind valides LIDO 1.1"

    rm -rf $dir # alten Stand löschen
    mkdir -p $dir
    cp "$input" "$dir/valid.xml"
}

receive_rdf() {
    echo "## $collection: $name"
    echo
    echo "Empfangene RDF-Daten im Turtle-Format aus \`$input\` "

    original=$dir/original.ttl
    unique=$dir/unique.nt

    tmp=$(mktemp)
    rapper -q -i turtle "$input" | sort | uniq > "$tmp"

    if [[ ! -s "$tmp" ]]; then
        rm "$tmp"
        echo "sind syntaktisch nicht korrekt oder leer!"
        exit 1
    fi

    # TODO: alten Stand sichern
    rm -rf $dir # alten Stand löschen
    mkdir -p $dir

    mv "$tmp" "$unique"
    echo "ist syntaktisch korrektes RDF. "
    echo
    echo "Anzahl unterschiedlicher Tripel: **$(<$unique wc -l)**"
    echo

    # Zusätzliche RDF-Filter anwenden
    filtered=$dir/filtered.nt
    echo "Gefiltertes RDF in \`$filtered\`. "
    echo
    echo -n "    "
    npm run --silent -- rdffilter $unique -o $filtered --stats -f ./rdffilter.js || exit
    npm run --silent -- rdffilter $unique -o $dir/removed.nt -r -f ./rdffilter.js || exit

    # Verschiedene Statistiken

    properties=$dir/properties.txt
    echo
    <$filtered awk '{print $2}' | sed 's/[<>]//g' | sort | uniq -c | sort -nrk1 > $properties
    echo "Statistik der Properties in \`$properties\` mit $(<$properties wc -l) Properties."
    echo "~~~"
    head -3 $properties
    echo "..."
    echo "~~~"

    namespaces=$dir/namespaces.txt
    echo
    # Heuristik zur Extraktion von Namensräumen aus absoluten URIs
    <$filtered awk '{print $1} $3~/^</ {print $3}' | sed 's/^<//' | \
        sed 's/#.*$/#/;t;s|/[^/]*>$|/|;t;s/:.*$/:/' | \
        sort | uniq -c | sort -nrk1 > $namespaces
    echo "Statistik der Namensräume von Subjekten und Objekten in \`$namespaces\` mit $(<$namespaces wc -l) Einträgen. "
    echo "Davon bekannte Namensräume:"
    echo "~~~"
    <$namespaces ./known-namespaces.py
    echo "~~~"
}

receive 2>&1 | tee tmp.md || true
mv tmp.md $dir/README.md

